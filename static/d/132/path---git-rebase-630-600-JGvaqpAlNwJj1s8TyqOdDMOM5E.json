{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"5c79ea92-6104-5399-8cea-cbc6333f6cff","html":"<p>There are lots of commands in git and we can often achieve our goal in several different ways. I usually manage to get my stuff done with just few commands like rebase, reset, cherry-pick. But sometimes I felt I was doing it ineffectively. Like for example squashing all commits into a single one so that it will be easier to rebase afterward.\nEven though I knew that rebasing with the <code class=\"language-text\">--onto</code> option would be useful, I never took the time to <em>man</em> it‚Ä¶ until recently. I guess now is a good time to write something about it.</p>\n<p>üå≥  <em>I assume in this post that we have basic knowledge about git, and that we are familiar with its index, working tree as well as commands like reset and cherry-pick</em></p>\n<!-- > Actually I just want to inaugurate my blog... any reason is a good reason ‚òùÔ∏è -->\n<h2 id=\"when-to-use-it\"><a href=\"#when-to-use-it\" aria-label=\"when to use it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When to use it?</h2>\n<p>Here are some use-cases:</p>\n<ul>\n<li>we want to cherry-pick multiples commits</li>\n<li>we have created a branch from the wrong one and we want to bring all the commits to the right one</li>\n<li>we want to delete a range of commits</li>\n</ul>\n<p>Basically it all comes down to this: <strong>apply a range of commits somewhere else</strong> </p>\n<p>PS: I will mention the interactive GUI at the end which let‚Äôs us do pretty much anything with the commit history.</p>\n<h2 id=\"rebase\"><a href=\"#rebase\" aria-label=\"rebase permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebase</h2>\n<p>Let‚Äôs begin with a little reminder about how rebase works in its simplest form. From the <em>man</em> (unix) we get:</p>\n<!-- ```\ngit rebase upstream [branch]\n``` -->\n<pre class=\"language-text\">\n<code class=\"language-text\">git rebase <span style=\"background:#ffe5ee\">upstream</span> <span style=\"background:#ffefc0\">[branch]</span></code>\n</pre>\n<p>I am gonna give some examples and intentionally avoid any short-hand way at first.</p>\n<iframe style=\"height:125px\" scrolling=\"no\" src=\"/git-rebase-figure1/\"></iframe>\n<!-- I am gonna give some examples and intentionally  -->\n<!-- I'll intentionally avoid any short-hand way at first. -->\n<!-- The ASCII art schema is animated, you can click on it to go through the steps. -->\n<!-- Let's say you have forked a _topic_ branch from _master B_ but master has evolve and you want to update the_topic_ branch according to master -->\n<!-- When you run the command `git rebase master topic` then: -->\n<p>When we run the command <code class=\"language-text\">git rebase <span style=\"background:#ffe5ee\">master</span> <span style=\"background:#ffefc0\">topic</span></code> then:</p>\n<ol start=\"0\">\n<li>Git performs a <code class=\"language-text\">checkout topic</code></li>\n<li>The index and working tree are reset to master. This is exactly like running <code class=\"language-text\">git reset --hard master</code> except that commits X, Y, Z are put aside for later use. Basically all commits that are in <em>topic</em> but not in <em>master</em> (<code class=\"language-text\">master..topic</code>)</li>\n<li>Those commits are applied one by one on master. This is like <em>cherry-picking</em> them.</li>\n</ol>\n<p>Step 2 may fail applying the commits. Don‚Äôt worry, be happy, we can either resolve the conflict by running <code class=\"language-text\">git rebase --continue</code> or get back to the state we left before the rebase with <code class=\"language-text\">git rebase --abort</code></p>\n<p><strong>Note</strong> If we already are on the <em>topic</em> branch (<em>HEAD</em> ‚Üí <em>topic</em>) then we can omit the <span style=\"background:#ffefc0\">branch</span>¬†arg and just type <code class=\"language-text\">git rebase master</code> (step 0 is skipped) This is a common short-hand.</p>\n<h2 id=\"what-about-the-code-classlanguage-text--ontocode-option\"><a href=\"#what-about-the-code-classlanguage-text--ontocode-option\" aria-label=\"what about the code classlanguage text  ontocode option permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about the <code class=\"language-text\">--onto</code> option?</h2>\n<p>The man tells us:</p>\n<!-- ```\ngit rebase --onto newbase upstream [branch]\n``` -->\n<pre class=\"language-text\">\n<code class=\"language-text\">git rebase --onto <span style=\"background:#eff3c5\">newbase</span> <span style=\"background:#ffe5ee\">upstream</span> <span style=\"background:#ffefc0\">[branch]</span></code>\n</pre>\n<p>The only difference is in step¬†1: git hard resets to <span style=\"background:#eff3c5\">newbase</span> instead of <em>upstream</em>.\nStep¬†2 remains the same, commits <span style=\"background:#ffe5ee\">upstream</span>..<span style=\"background:#ffefc0\">branch</span> are applied. </p>\n<h4 id=\"lets-take-an-example\"><a href=\"#lets-take-an-example\" aria-label=\"lets take an example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lets take an example</h4>\n<p>We have created a branch <em>topicB</em> from <em>topicA</em>  but it was a ‚Äúmistake‚Äù. The work on <em>topicB</em> is totally unrelated to <em>topicA</em> and thus doesn‚Äôt depend on it. </p>\n<iframe style=\"height:171px\" scrolling=\"no\" src=\"/git-rebase-figure2/\"></iframe>\n<p>So naturally, we need to fix this unfortunate mistake to make <em>topicB</em> fork from <em>master</em>. To do so we can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">git rebase --onto master topicA topicB</code></pre></div>\n<p>As seen previously, step 1 is hard resetting to master, step 2 is applying commits <code class=\"language-text\">topicA..topicB</code> .</p>\n<h4 id=\"another-example\"><a href=\"#another-example\" aria-label=\"another example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Another example</h4>\n<p>I told you in the intro that we could also remove a range of commits by using this option.\nWell lets say we have a branch like the one below and want to get rid of commits <em>F</em> and <em>G</em>. </p>\n<iframe style=\"height:76px\" scrolling=\"no\" src=\"/git-rebase-figure3/\"></iframe>\n<p>We can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase --onto E G I</code></pre></div>\n<p>Step 1 is a hard reset to <em>E</em> and step 2 is picking <code class=\"language-text\">G..I</code>\n(as a reminder <em>G</em> is excluded: this is how <code class=\"language-text\">..</code> works in git)\n<em>F</em> and <em>G</em> are removed.</p>\n<h2 id=\"lets-be-play-with-the-past\"><a href=\"#lets-be-play-with-the-past\" aria-label=\"lets be play with the past permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let‚Äôs be play with the past?</h2>\n<p>The <code class=\"language-text\">-i</code> option lets us interact with any commits. We can move, squash, delete, rename, edit‚Ä¶ It‚Äôs the most powerful rebase command that let‚Äôs us do pretty much anything with the git history.</p>","frontmatter":{"title":"Demystify git rebase with animations","date":"January 18, 2019","spoiler":"Interactive ASCII arts to understand git rebase","thumbnail":{"childImageSharp":{"sizes":{"src":"/static/3211122683a9a05c6be192d516c559f3/6b179/ascii-preview.png","srcSet":"/static/3211122683a9a05c6be192d516c559f3/60493/ascii-preview.png 36w,\n/static/3211122683a9a05c6be192d516c559f3/c0be5/ascii-preview.png 72w,\n/static/3211122683a9a05c6be192d516c559f3/6b179/ascii-preview.png 144w,\n/static/3211122683a9a05c6be192d516c559f3/b0766/ascii-preview.png 216w,\n/static/3211122683a9a05c6be192d516c559f3/459b4/ascii-preview.png 288w,\n/static/3211122683a9a05c6be192d516c559f3/d1d46/ascii-preview.png 432w,\n/static/3211122683a9a05c6be192d516c559f3/322c8/ascii-preview.png 560w","sizes":"(max-width: 144px) 100vw, 144px"}}}},"fields":{"slug":"/git-rebase/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/git-rebase/","previous":{"fields":{"slug":"/ritter-toussaint/"},"frontmatter":{"title":"Cercle et rectangle minimum","draft":false}},"next":{"fields":{"slug":"/fp-basics/"},"frontmatter":{"title":"Basics of Functional Programming","draft":true}}}}