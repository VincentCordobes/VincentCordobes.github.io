{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"84f160b0-8d88-5236-984f-df384fd53cd6","html":"<p><em>React</em> fournit seulement un moyen de dessiner de manière efficace des\ncomposants en fonction de données d’entrées.</p>\n<p>Flux est un <em>pattern</em> permettant de gérer <strong>l’état d’une application</strong> qui garanti un flux de données\nunidirectionnel (<em>one way databinding</em>) Redux est l’implémentation\nla plus populaire.</p>\n<p>Redux, met en scène 3 principes :</p>\n<ul>\n<li><strong>une seule source de vérité</strong> : le <em>state</em> de l’application est maintenu dans une structure de données à l’intérieur d’un seul store</li>\n<li>le state est <strong>immutable</strong> : La seule manière de modifier le <em>state</em> est via l’émission d’une <strong>action</strong>, un objet décrivant la modification à apporter. Toutes les modifications sont centralisées et se produisent une à une, évitant ainsi les problèmes de concurrence</li>\n<li>les modifications sont effectuées à l’aide de <strong>fonction pures</strong> appelées <strong>reducers</strong></li>\n</ul>\n<figure><img style=\"width:max-content\" src=\"/flux-eec49feb72d494c46fe2f4afae80bd77.svg\"><figcaption>Architecture Redux</figcaption></figure>\n<p>Le schéma illustre le flux unidirectionnel des données dans cette architecture : des <strong>actions</strong> sont <em>dispatchées</em> et traitées par le <strong>reducer</strong>, qui se charge de mettre à jour le store. Toutes les vues (ici les composants react) abonnées au store se mettent à jour en conséquence. Ces vues peuvent également “dispatcher” des actions et ainsi de suite.</p>\n<h3>Actions et Actions creators</h3>\n<p>Les actions sont des paquets de données envoyés au <em>store</em>. Elles\nsont la seule source d’information du store. Une action est envoyée au\nstore grâce à la fonction <code class=\"language-text\">store.dispatch</code>.</p>\n<p>Voici un exemple d’action qui représente le\nchangement de nom d’une personne :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vince'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si cette action se révèle être utilisée souvent, nous pouvons écrire une fonction qui se chargera de la créer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On appelle ces fonctions des <strong>action creator</strong>. Elles rendent les actions réutilisables et facilement testables.\nLes actions peuvent être “dispatchées” avec : <code class=\"language-text\">dispatch(changeName(&#39;Vincent&#39;))</code></p>\n<h3>Reducer</h3>\n<p>Les actions décrivent le fait que quelque chose s’est passé mais ne\nspécifient pas la manière dont le store doit être modifié. C’est le rôle\ndu reducer, une <strong>fonction pure</strong> qui prend en\nparamètre le <em>state</em>, une action, et retourne le nouveau <em>state</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(previousState, action) =&gt; nextState</code></pre></div>\n<p>Le <em>reducer</em> est une fonction pure, par conséquent il ne doit <strong>jamais</strong>:</p>\n<ul>\n<li>modifier directement ses arguments</li>\n<li>effectuer des opérations ayant des effets de bord tel que des appels à une api</li>\n<li>appeler des fonctions impures telles que <code class=\"language-text\">Date.now()</code> etc…</li>\n</ul>\n<p>Il est uniquement chargé de calculer le <em>nextState</em>.</p>\n<h4>✘ Exemple: un reducer incorrect, mutation du state INTERDITE!</h4>\n<p>Le <em>state</em> est muté.\nLa propriété du <em>state</em> étant modifiée directement (l.4),\nles composants abonnés à cette partie du <em>state</em> ne se mettrons pas à jour et ignorerons cette modification.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">:</span>\n      state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// INTERDIT !!</span>\n      <span class=\"token keyword\">return</span> state \n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>✔ Exemple Un reducer correct</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em><strong>Note</strong> : On utilise ici l’opérateur object spread <code class=\"language-text\">...</code>, une syntaxe d’ECMAScript 2016, qui permet de copier les propriétés d’un\nobjet dans un nouvel objet d’une manière plus succincte. Nous pouvons également utiliser des bibliothèques qui garantissent l’immutabilité telles que <a href=\"https://github.com/facebook/immutable-js/\">immutable.js</a> développée par Facebook</em></p>\n<!-- <h6>TODO: combineReducer pour réduire le boilerplate</h6> -->\n<h3>Store</h3>\n<p>Le <em>store</em> est un objet qui :</p>\n<ul>\n<li>maintient le <em>state</em> de l’application</li>\n<li>permet l’accès à ce <em>state</em> via <code class=\"language-text\">getState()</code></li>\n<li>permet de mettre à jour le <em>state</em> via <code class=\"language-text\">dispatch(action)</code></li>\n<li>permet d’abonner des composants via <code class=\"language-text\">subscribe(listener)</code> (composants notifiés lorsque le <em>state</em> subit une modification)</li>\n</ul>\n<h3>Async Actions</h3>\n<p>Afin d’orchestrer des flux asynchrones (par exemple, les appels réseaux) nous pouvons utiliser le <em>middleware</em> <em>Redux-thunk</em>.\n<em>Ce _middleware</em> permet de traiter les actions étant des fonctions (appelées <em>thunk action</em>).\nUne action <em>thunk</em> ne doit pas forcément être pure et peut avoir des effets de bords. Les fonctions <em>dispatch</em> et <em>getState</em> du store lui sont passées en argument, ce qui lui donne la possibilité de <em>dispatcher</em> d’autres <em>actions</em> et d’accéder au <em>state</em>.</p>\n<h4>Exemple d’un <em>thunk action creator</em> qui retourne une fonction :</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">whatIsMyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://vincent.cordobes/name'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameSuccess</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>L’exemple ci-dessus met en évidence une <em>action creator</em> qui retourne une fonction. Des actions marquant le début, le succès ou une erreur de l’appel (l.5) à l’API sont “dispatchées” (l.3, l.7, l.9) permettant de mettre à jour le <em>store</em> en fonction de l’avancement de la requête.</p>\n<p><em>Remarques relativement au code ci-dessus : syntaxe avec les mots clés async/await. Cette syntaxe fait son apparition dans ECMAScript 2017. En résumé, <code class=\"language-text\">await</code> permet d’attendre la résolution d’une promesse et ne peux être utilisé que dans une fonction préfixée par <code class=\"language-text\">async</code> (elle-même renverra à son tour une promesse) Il permet d’écrire le code asynchrone de javascript à la manière d’un code synchrone.</em></p>\n<h3>Composants containers et composants visuels</h3>\n<p>La séparation <em>container</em>/<em>presentational</em> est d’autant plus vrai dans redux.\nCes deux termes proviennent, en l’occurrence, du créateur de redux <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.xbauu6f3x\">smart and dumb components</a></p>\n<h4>Container</h4>\n<ul>\n<li>Responsables de la manière dont <em>les choses</em> fonctionnent</li>\n<li>Dispatchent les actions flux</li>\n<li>Transmettent des données et comportements aux composants <em>presentational</em> via leur <em>props</em></li>\n<li>Peuvent contenir des composants <em>présentation</em> et <em>container</em></li>\n<li>Ne contiennent pas d’éléments du DOM ni de styles</li>\n<li>Peuvent être générés par connect()</li>\n</ul>\n<h4>Visuels</h4>\n<ul>\n<li>Responsables de la manière dont <em>les choses</em> apparaissent sur l’interface</li>\n<li>Peuvent contenir des composants <em>présentation</em> et <em>container</em></li>\n<li>possèdent souvent des éléments DOM et du style</li>\n<li>Indépendants du reste de l’application</li>\n<li>Ne spécifient pas la manière dont les données sont chargés ou modifiées</li>\n<li>Reçoivent les données et les callback exclusivement via leurs props</li>\n<li>Possèdent uniquement un <em>state</em> si celui-ci concerne l’UI (et non des data)</li>\n<li>Souvent écrits sous forme de fonctions</li>\n</ul>\n<h3>Utilisation des selecteurs</h3>\n<p>Afin de comprendre l’utilité des sélecteurs, prenons un exemple.\nConsidérons une liste de personnes, une recherche (par nom) et des filtres (sexe, age, etc…) sur ces personnes.</p>\n<p>En suivant les principes <em>Redux</em>, le <em>store</em> contient les données et les critères de recherche.\nÀ partir de ces éléments nous pouvons calculer la liste filtrée à afficher. </p>\n<p>Une bonne pratique, concernant le <em>state</em>, est de contenir seulement des donnée minimisée,\nc’est-à-dire des données ne pouvant pas être obtenues à partir d’autres données.\nLes états dérivés (calculés) ne doivent pas être présents dans le <em>state</em>.</p>\n<figure>\n<img src=\"/selectors0-bc881c9cf7496038f4f1a3154c288f66.svg\" width=\"300\">\n<figcaption>React filtre la data au render</figcaption>\n</figure>\n<p>Le <em>bon</em> endroit pour filtrer et afficher cette liste est donc la méthode <em>render</em>.\nAinsi, si  un critère de recherche ou si les données changent,\nle composant exécute la méthode <code class=\"language-text\">render</code>, filtre les données et les affiche.\nIl en résulte une <em>UI</em> toujours synchronisée avec le <em>state</em>. </p>\n<p>Cette technique présente néanmoins un inconvénient.\nSupposons qu’une <em>props</em> autre que les filtres et la liste de personnes, change :\nle filtrage de la liste se fera donc, inutilement, à chaque <em>update</em> du composant.</p>\n<p>La complexité de ce filtrage étant du <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>, cela n’est pas très gênant si la taille des données à filtre reste modérée. </p>\n<p>Cependant, des listes de données potentiellement grandes ou même un calcul plus  complexe dégraderaient fortement les performances de l’application.</p>\n<p>C’est ici qu’entrent en jeu les selectors :</p>\n<figure>\n  <img src=\"/selectors-1dca7c8fdfec91367a93fb1aa35a8ac4.svg\" width=\"328\">\n  <figcaption>Un selecteur filtre la data pour la passer au composant</figcaption>\n</figure>\n<p>Les <strong>selectors calculent des données dérivées</strong>. Ils permettent au state de ne stocker que les données minimisée.\nIls sont efficaces et ne sont pas recalculés si les arguments restent les mêmes → ils sont <strong>mémoisés</strong>.\nEnfin ils sont <em>composables</em>, c’est-à-dire qu’ils peuvent être utilisés en\nentrées d’autres selectors.\nAinsi toute la complexité est <em>déplacée</em> à l’exterieur et prise en charge par les selectors,</p>\n<p>Les <em>selectors</em> jouent le rôle d’<em>api</em>, permettant un accès au <em>state</em>.\nLes composants React ne connaisse que cette interface.\nUne conséquence directe est le <em>découplage</em> de ces composants vis-à-vis de la <em>forme</em> du <em>state</em>.\nUn autre bénéfice est la simplification du code des composants React.</p>\n<h4>Exemple avec la bibliothèque <a href=\"https://github.com/reactjs/reselect\">reselect</a></h4>\n<h5>Définition des <em>selectors</em></h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsers</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>users\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSearchTerm</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>searchTerm\n\n<span class=\"token comment\">// Memoized selector</span>\n<span class=\"token keyword\">const</span> getFilteredUsers <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getUsers<span class=\"token punctuation\">,</span>\n  getSearchTerm<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> searchTerm<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n    user <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchTerm<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Définition du composant React</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filteredUsers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>filteredUsers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Création du container</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  filteredUsers<span class=\"token punctuation\">:</span> <span class=\"token function\">getFilteredUsers</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UserList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note</strong> : Nous avons seulement besoin de transmettre la liste filtrée au composant UserList. <code class=\"language-text\">connect</code> suffit à créer le composant <em>container</em>.</p>\n<h3>Synoptique technique</h3>\n<p>Voici un schéma illustrant l’architecture d’une application redux.\nLes différentes composantes de ce schéma sont expliquées dans la suite de ce document.</p>\n<figure>\n  <img src=\"/synoptique-575081e2b59a5c6a78413c57ba9509e3.svg\" width=\"500\">\n  <figcaption>Synoptique technique React-Redux</figcaption>\n</figure>\n<p><strong>Note</strong> : Redux est une bibliothèque dogmatique mettant en scène plusieurs concepts et <em>patterns</em> (immutabilités, flux unidirectionnel etc…) et ces principes sous-jacents peuvent parfaitement s’appliquer à d’autres architectures.</p>\n<h3>Références</h3>\n<ul>\n  <li>Redux doc. <em>https://redux.js.org</em></li>\n  <li>Smart and dumb component. <em>https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.h6rxn85kl</em></li>\n  <li>React and flux in production best practices. <em>https://medium.com/@delveeng/react-and-flux-in-production-best-practices-c87766c57cb6#.elbdrmo4f</em></li>\n</ul>","frontmatter":{"title":"Architecture Redux","date":"December 17, 2016","spoiler":"Des bons concepts"},"fields":{"slug":"/redux-intro/"}}},"pageContext":{"slug":"/redux-intro/","previous":{"fields":{"slug":"/react-intro/"},"frontmatter":{"title":"Introduction à React"}},"next":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase"}}}}