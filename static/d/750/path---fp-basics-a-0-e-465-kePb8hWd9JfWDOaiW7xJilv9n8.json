{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"9b921c75-89cb-559e-a070-b21b9eaed8ca","html":"<p>The essence of programming is composition.  In the OOP paradigm we are building sofware by using Object that communicates with each other. To build bigger software we compose those objects.</p>\n<p>In FP the building block is a function! Each function operates on data.\nThe software is made using functions and we compose them to build bigger software.</p>\n<p>What is functional programming? what are those principles?\nGonna talk here about the very basics of FP using the functional language OCaml</p>\n<p>FP see more programming in a mathematical way.</p>\n<p>major difference between functional languages and imperative languages is</p>\n<h3>Expression vs Statements</h3>\n<p>An expression is everything that can be evaluated to produce a value.</p>\n<h4>In imperative languages</h4>\n<p>Since in OCaml everything is an expression, I‚Äôm going to use javascript to highlight the differences.\nHere is an example of an expression: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> circumference <span class=\"token operator\">=</span> \n   <span class=\"token comment\">// It evaluates to a number</span>\n   <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> radius </code></pre></div>\n<p>On the contrary <code class=\"language-text\">if-else</code> are not expressions in javascript, meaning that you can‚Äôt do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// This is not a javascript valid syntax!</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>moi <span class=\"token operator\">===</span> <span class=\"token string\">'Vincent'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Same goes for statements <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">try ... catch</code>, <code class=\"language-text\">break</code> etc‚Ä¶ That‚Äôs a lot of keywords for a single language üòú </p>\n<h4>And what about in FP languages ?</h4>\n<p>Previously I said everything was an expression in OCaml. But what about the  <code class=\"language-text\">if-else</code>, <code class=\"language-text\">for-loop</code>‚Ä¶? they exist, but those are also expressions!</p>\n<p><code class=\"language-text\">if-else</code> is evaluated to its body content:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">if</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"ocaml\"</span> <span class=\"token keyword\">then</span> \n    <span class=\"token string\">\"I quite like FP\"</span> \n  <span class=\"token keyword\">else</span> \n    <span class=\"token string\">\"Sorry, what?\"</span>\n<span class=\"token comment\">(* val message : string *)</span></code></pre></div>\n<p><code class=\"language-text\">for</code> and <code class=\"language-text\">while</code> loop are evaluated to the <code class=\"language-text\">unit</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span> <span class=\"token keyword\">do</span> printf <span class=\"token string\">\"%d\"</span> i <span class=\"token keyword\">done</span>\n<span class=\"token comment\">(* unit = () *)</span></code></pre></div>\n<p>And so on.</p>\n<h3>Immutability</h3>\n<p>An immutable variable means its value can‚Äôt be changed after it‚Äôs created.\nIf you want to modify it, well you don‚Äôt. Instead you create a new variable with the new value.</p>\n<p>In OCaml record fields are immutable by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token punctuation\">_</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Vincent\"</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token punctuation\">_</span>name  <span class=\"token operator\">=</span> <span class=\"token string\">\"Cordobes\"</span><span class=\"token punctuation\">;</span>\n  age        <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you try to update <code class=\"language-text\">me</code>, you‚Äôll get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">me<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;-</span> <span class=\"token number\">35</span> <span class=\"token comment\">(* error: the record field age is not mutable *)</span></code></pre></div>\n<p>Instead you need to create a new variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> new<span class=\"token punctuation\">_</span>me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> me <span class=\"token keyword\">with</span> age <span class=\"token operator\">=</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In some other languages objects are mutables by default which can lead to many ‚Äúwtf!‚Äù<br>\nFor example in javascript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vince'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 23</span>\n<span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 498</span></code></pre></div>\n<div style=\"position:absolute;\n            font-size: 25px;\n            transform: translate(10em, -1.2em);\">ü§î</div>\n<br />\n<p>Who is responsible for that age change? It must be <code class=\"language-text\">printAge</code>! It‚Äôs the only function call we have between the two <code class=\"language-text\">console.log</code>. But wait‚Ä¶ can we really trust <code class=\"language-text\">console.log</code> ? What if I tell you it‚Äôs been monkey patched? Replaced by a custom bugged logger üôà Okay chances are low but if one is being imaginative, it‚Äôs possible.\nThe point is that in a mutable world we can‚Äôt really trust anything. As you can see even in a 4 lines program, mutability can lead to very unexpected behaviour.</p>\n<p>So immutability guaranties us that a variable will never change.\nIt‚Äôs not an FP specific thing but rather a best practice as it makes codes more readable and maintainable.\nIt also makes it easier to do concurrent programming, eliminates defensive copies etc..</p>\n<p>Is mutability always bad tho? Of couse not and as often in IT, it depends! If it‚Äôs local, effects are totally controlled or allow us to optimize a performance critical part of the program etc‚Ä¶ <strong>it‚Äôs totally fine</strong>.</p>\n<h3>Pure function</h3>\n<ol>\n<li>Its result depends only on its input‚Äîand not on any external state</li>\n<li>It has no side effects such as mutating a global state/reference arguments, having I/O‚Ä¶</li>\n</ol>\n<p>‚Üí Given the same input, it always returns the same result</p>\n<p>This is a pure function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> double x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x</code></pre></div>\n<p>Naturally it shouldn‚Äôt call unpure code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> get<span class=\"token punctuation\">_</span>week<span class=\"token punctuation\">_</span>day <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Unix<span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> Unix<span class=\"token punctuation\">.</span>localtime <span class=\"token keyword\">in</span>\n  now<span class=\"token punctuation\">.</span>tm<span class=\"token punctuation\">_</span>wday</code></pre></div>\n<p><code class=\"language-text\">Unix.time</code> is not pure and will always returns a different result. Impurity is contagious. Thus <code class=\"language-text\">get_week_day</code> is not pure. </p>\n<p>There are many benefits to pure functions‚Äîeasy to test, predictables, make the code easier to reason about. They also enable optimizations such as memoization, parallelization.</p>\n<p>I believe in a program one want to maximize pure functions and push unpure code at the edge.</p>\n<h3>Referential transparency</h3>\n<p>Let‚Äôs drop some fancy jargon! Referential transparency means you can safely replace an expresssion by its value without changing the program behaviour.</p>\n<p>Let‚Äôs take the expression <code class=\"language-text\">x + f x</code>. Assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> is immutable and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a pure function, then every time we encounter that expression in our program we could replace it by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> where  <code class=\"language-text\">let y = x + f x</code></p>\n<h3>First class function</h3>\n<p>Functions are data. It means we can pass them as arguments to other functions, return them from other functions or bind them to variables.\nIn this way they are treated as first-class citizens.</p>\n<p>In OCaml we define a function <em>increment</em> that takes one argument <em>x</em> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> add<span class=\"token punctuation\">_</span>one x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>This is actually a syntactic sugar over an anonymous function bound to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> add<span class=\"token punctuation\">_</span>one <span class=\"token operator\">=</span> <span class=\"token keyword\">fun</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<h3>Higher order function</h3>\n<p>It refers to a function that takes one or many function as argument or returns a function</p>\n<h3>Composition</h3>\n<h3>Curryfication</h3>","frontmatter":{"title":"Basics of Functional Programming","date":"January 31, 2019","spoiler":"Gonna talk about basics of fp","thumbnail":null},"fields":{"slug":"/fp-basics/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/fp-basics/","previous":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase","draft":null}},"next":{"fields":{"slug":"/tdd/"},"frontmatter":{"title":"One way to approach a problem","draft":true}}}}