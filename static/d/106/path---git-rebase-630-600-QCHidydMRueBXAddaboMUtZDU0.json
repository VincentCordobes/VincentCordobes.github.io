{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"14bdcbc8-d066-5675-b1c3-877ea6091375","html":"<p>⚠️ I assume you have basic knowledge about <em>git</em>, and that you are familiar with its index, working tree as well as commands like <code class=\"language-text\">reset</code>, <code class=\"language-text\">cherry-pick</code>.</p>\n<p>There are lots of commands in git and you can often achieve your goal in several different ways. I usually manage to get my stuff done with just few commands like <code class=\"language-text\">rebase</code>, <code class=\"language-text\">reset</code>, <code class=\"language-text\">cherry-pick</code>. But sometimes I felt I was doing it in an ineffective way though. Like for example <em>squashing</em> all commits into a single one so that it is easier to <em>rebase</em> afterward 🙈\nEven though I knew that rebasing with the <code class=\"language-text\">--onto</code> option would be useful, I never took the time to <em>man</em> it… until recently.</p>\n<p>I guess now is a good time to write something about it (Actually I just want to inaugurate my blog… any reason is a good reason 😝)</p>\n<h3>When to use it?</h3>\n<p>Here are some use-cases:</p>\n<ul>\n<li>you want to <code class=\"language-text\">cherry-pick</code> multiples commits</li>\n<li>you have created a branch from the ‘wrong’ one and you want to start over from the ‘right’ one</li>\n<li>you want to delete a range of commits</li>\n</ul>\n<p>Basically it all comes down to this: <strong>apply a range of commits somewhere</strong> </p>\n<h3>Demistify rebase in its simplest form</h3>\n<p>Lets begin with a little reminder about how rebase works in its simplest form. From the man (unix) we get:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">git rebase upstream [branch]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>I’ll give you some examples and intentionally avoid any shortcut at first.\nLet say that you are on branch <code class=\"language-text\">topic</code> so <code class=\"language-text\">HEAD</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">→</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <code class=\"language-text\">topic</code>. </p>\n<figure>\n    <iframe style=\"height:110px;\" scrolling=\"no\" src=\"/git1/\"></iframe>\n    <figcaption>git rebase master (tap to animate)</figcaption>\n</figure>\n<p>When you run the command <code class=\"language-text\">git rebase master topic</code> then:</p>\n<ol>\n<li>\n<p>The index and working tree are reset to <code class=\"language-text\">master</code>. This is exactly like running <code class=\"language-text\">git reset --hard master</code> except that changes to tracked files in the working tree are saved somewhere for later use.</p>\n</li>\n<li>\n<p>Those saved commits are applied one by one. It’s like “cherry-picking” those commits.</p>\n</li>\n</ol>\n<p><strong>Note</strong> that we omit the second argument <code class=\"language-text\">[branch]</code> <strong>because</strong> you were ont the <code class=\"language-text\">topic</code> branch.</p>\n<p>you don’t have to be on the <code class=\"language-text\">topic</code> branch. git can perform a <code class=\"language-text\">checkout B</code> for you when you specify the 2nd arg <code class=\"language-text\">branch</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">→</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <code class=\"language-text\">git rebase A B</code>\nSo <code class=\"language-text\">git rebase A</code> is just a short hand for <code class=\"language-text\">git rebase A B</code> <strong>when</strong> you are already on <code class=\"language-text\">B</code> branch </p>\n<p>To summarize all of the following scenarios are equivalents:\n%% l23 from firstdraft </p>\n<h3>How about the <code class=\"language-text\">--onto</code> option?</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">git rebase --onto newbase upstream [branch]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The only difference is that git will reset to <code class=\"language-text\">newbase</code> instead of <code class=\"language-text\">upstream</code> and will then applies commits between <code class=\"language-text\">upstream</code> (exluded) and <code class=\"language-text\">branch</code> (included)</p>\n<p>%% ouverture</p>\n<h3>Feel the power of <code class=\"language-text\">-i</code> option</h3>\n<p>The <code class=\"language-text\">-i</code> option is one of my favorite one because it lets you squash, delete, rename, edit… basically playing with the past !! ❤️  but this is another story</p>","frontmatter":{"title":"Rebase onto","date":"December 26, 2018","spoiler":"Rewrite the past in fewer step"},"fields":{"slug":"/git-rebase/"}}},"pageContext":{"slug":"/git-rebase/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}