{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"14bdcbc8-d066-5675-b1c3-877ea6091375","html":"<p><em>‚ö†Ô∏è I assume in this post that you have basic knowledge about git, and that you are familiar with its index, working tree as well as commands like reset and cherry-pick</em></p>\n<p>There are lots of commands in git and you can often achieve your goal in several different ways. I usually manage to get my stuff done with just few cmds like rebase, reset, cherry-pick. But sometimes I felt I was doing it in an ineffective way. Like for example squashing all commits into a single one so that it will be easier to rebase afterward üôà\nEven though I knew that rebasing with the <code class=\"language-text\">--onto</code> option would be useful, I never took the time to <em>man</em> it‚Ä¶ until recently. I guess now is a good time to write something about it.</p>\n<!-- > Actually I just want to inaugurate my blog... any reason is a good reason ‚òùÔ∏è -->\n<h3>When can the <code class=\"language-text\">--onto</code> option be useful?</h3>\n<p>Here are some use-cases:</p>\n<ul>\n<li>you want to cherry-pick multiples commits</li>\n<li>you have created a branch from the wrong one and you want to bring all the commits to the right one</li>\n<li>you want to delete a range of commits</li>\n</ul>\n<p>Basically it all comes down to this: <strong>apply a range of commits somewhere else</strong> </p>\n<h3>Rebase</h3>\n<p>Lets begin with a little reminder about how rebase works in its simplest form. From the <em>man</em> (unix) we get:</p>\n<!-- ```\ngit rebase upstream [branch]\n``` -->\n<pre class=\"language-text\">\n<code class=\"language-text\">git rebase <span style=\"background:#ffe5ee\">upstream</span> <span style=\"background:#ffefc0\">[branch]</span></code>\n</pre>\n<p>I am gonna give some examples and intentionally avoid any short-hand way at first.</p>\n<iframe style=\"height:125px\" scrolling=\"no\" src=\"/git-rebase-figure1/\"></iframe>\n<!-- When you run the command `git rebase master topic` then: -->\n<p>When you run the command <code class=\"language-text\">git rebase <span style=\"background:#ffe5ee\">master</span> <span style=\"background:#ffefc0\">topic</span></code> then:</p>\n<ol start=\"0\">\n<li>Git performs a <code class=\"language-text\">checkout topic</code></li>\n<li>The index and working tree are reset to master. This is exactly like running <code class=\"language-text\">git reset --hard master</code> except that commits X, Y, Z are put aside for later use. Basically all commits that are in <em>topic</em> but not in <em>master</em> (<code class=\"language-text\">master..topic</code>)</li>\n<li>Those commits are applied one by one on master. This is like <em>cherry-picking</em> them.</li>\n</ol>\n<p>Step 2 may fail applying the commits. Don‚Äôt worry, be happy, you can either resolve the conflict by running <code class=\"language-text\">git rebase --continue</code> or get back to the state you left before the rebase with <code class=\"language-text\">git rebase --abort</code></p>\n<p><strong>Note</strong> If you already are on the <em>topic</em> branch (<em>HEAD</em> ‚Üí <em>topic</em>) then you can omit the <span style=\"background:#ffefc0\">branch</span>¬†arg and just type <code class=\"language-text\">git rebase master</code> (step 0 is skipped) This is a common short-hand.</p>\n<h3>What about the <code class=\"language-text\">--onto</code> option?</h3>\n<p>The man tells us:</p>\n<!-- ```\ngit rebase --onto newbase upstream [branch]\n``` -->\n<pre class=\"language-text\">\n<code class=\"language-text\">git rebase --onto <span style=\"background:#eff3c5\">newbase</span> <span style=\"background:#ffe5ee\">upstream</span> <span style=\"background:#ffefc0\">[branch]</span></code>\n</pre>\n<p>The only difference is in step¬†1: git hard resets to <span style=\"background:#eff3c5\">newbase</span> instead of <em>upstream</em>.\nStep¬†2 remains the same, commits <span style=\"background:#ffe5ee\">upstream</span>..<span style=\"background:#ffefc0\">branch</span> are applied. </p>\n<p>Lets take this exemple\nYou started a branch from the wrong one and you wanna retmber sur vos pattes </p>\n<iframe style=\"height:171px\" scrolling=\"no\" src=\"/git-rebase-figure2/\"></iframe>\n<p>I told you in the intro that we could also remove a range of commits by using this option.\nWell .. lets take a look at‚Ä¶</p>\n<iframe style=\"height:125px\" scrolling=\"no\" src=\"/git-rebase-figure3/\"></iframe>\n<h3>And the <code class=\"language-text\">-i</code> option?</h3>\n<p>The <code class=\"language-text\">-i</code> option lets you visualize commits that are concerned by the rebase and <em>interact</em> with them.  You can <em>squash</em>, <em>delete</em>, <em>rename</em>, <em>edit</em>‚Ä¶ basically playing with the past!!</p>","frontmatter":{"title":"Rebase - rewrite the past in fewer steps","date":"January 06, 2019","spoiler":"Demistify git rebase with interactive animations"},"fields":{"slug":"/git-rebase/"}}},"pageContext":{"slug":"/git-rebase/","previous":{"fields":{"slug":"/react-intro/"},"frontmatter":{"title":"React - intro"}},"next":null}}