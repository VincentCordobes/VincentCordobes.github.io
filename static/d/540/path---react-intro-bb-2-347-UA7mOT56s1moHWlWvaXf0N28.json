{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"2db1f4ed-e3b1-57e0-8cae-bd16730d845d","html":"<p>React est une bibliothèque javascript permettant de <strong>construire des interfaces graphiques composables</strong>. </p>\n<p>La modélisation des interfaces graphiques d’une application au cours du temps est un sujet complexe. Il est, en effet, difficile de suivre l’état d’une application, après une série d’interactions utilisateur et/ou externes.\nDans un SPA, nous ne pouvons plus compter sur des rechargements entiers d’une page web pour garder une interface synchronisée et cohérente.</p>\n<h2>L’idée derrière React</h2>\n<p>La solution de React est de décrire “à quoi” l’application doit ressembler à n’importe quel instant donné → construction de\nl’<em>UI</em> de manière <strong>déclarative</strong>. Ce fonctionnement nous donne l’impression que React redessine entièrement l’interface à chaque <em>update</em>\n(uniquement une impression → cf DOM virtuel) Cela rend la conception et le développement d’application considérablement plus simple et nous permet\nde garder très facilement l’interface à jour avec un modèle de données.  L’élaboration de ces interfaces se fait à base de <strong>composants React</strong>.</p>\n<p>On pourrait assimiler un composant React à une <strong>fonction</strong>.\nC’est d’ailleurs une des 2 manières possibles d’écrire une composant React.</p>\n<p>L’API des composants est très simple. Un composant <em>peut</em> posséder :</p>\n<ul>\n<li>un <strong>state</strong></li>\n<li>des propriétés : les données d’entrées du composant → <strong>props</strong></li>\n<li>Une méthode <strong>render</strong> chargée du rendu du composant, appelée\nlorsque son <em>state</em> ou une de ses <em>props</em> changent.</li>\n<li>Des méthodes liées au <strong>cycle de vie</strong> du composant <code class=\"language-text\">componentDidMount</code>,\n<code class=\"language-text\">componentWillReceiveProps</code> etc…)</li>\n</ul>\n<h3>Écriture avec les classes ES6</h3>\n<p>Ci-dessous un composant React ayant pour seule vocation d’afficher la propriété <em>user</em>.\nSi <em>user</em> change, React redessine la partie du composant ayant changé.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bonjour</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Écriture sous forme de fonction</h3>\n<p>Ce composant peut aussi être écrit sous la forme d’une fonction appelée <strong>Stateless functional component</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bonjour</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Ce type de composant <strong>ne possède ~pas de <em>state</em>~ (plus vrai au jour d’aujourd’hui 2019 avec les <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a><em>Hooks</em> ), pas d’instance ni de méthodes liées au cycle de vie</strong> d’un composant React. Il ne s’agit que d’une\nsimple fonction retournant un résultat en fonction de ses arguments (les <em>props</em>)\nCette écriture étant plus concise, elle est à privilégier dans la mesure du possible.</p>\n<h3>Dessiner un composant dans un nœud du DOM</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Bonjour</span> <span class=\"token attr-name\">user</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Vincent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Pour dessiner le composant dans le DOM il suffit d’appeler\nla méthode <code class=\"language-text\">ReactDOM.render</code> avec ledit Composant et le nœud du DOM où\nl’on souhaite le dessiner.</p>\n<h3>JSX</h3>\n<p>Le code “XML like” que retourne la méthode <em>render</em> s’appelle du <strong>JSX</strong>\net est un sucre syntaxique permettant de créer les nœuds React.\nL’utilisation du JSX n’est pas obligatoire. Voici la correspondance du\ncode JSX :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Bonjour</span> <span class=\"token attr-name\">user</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Vincent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Avec le code javascript équivalent :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bonjour'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vincent'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Distinguer 2 types de composants React</h2>\n<p>D’un point de vue architectural, nous pouvons très vite distinguer deux types de composants.\nRedux (cf : suite de l’article) parle de <strong>container component</strong> (ou <em>smart component</em>) et de\n<strong>presentational component</strong> (ou <em>dumb component</em>)\nSi l’on se rapportait à une architecture <em>MVC</em> plus traditionnelle,\nle premier correspondrait au <strong>C</strong>ontrolleur et le deuxième à la <strong>V</strong>ue.\n<strong>On sépare donc les composants responsables de la logique métier/orchestration des actions, de ceux reponsables de la vue</strong></p>\n<h3>Exemple</h3>\n<p>Considérons un composant qui affiche une liste de pistes (<em>tracks</em>) provenant d’une api.</p>\n<p>Le code ci-dessous est <strong>moyen</strong> 👿, en effet un même composant <strong>ne devrait pas</strong> être responsable à la fois :</p>\n<ul>\n<li>d’aller chercher les données de l’api et potentiellement les transformer  </li>\n<li>d’afficher et mettre en forme ces données </li>\n</ul>\n<p>Ce manque de séparation entre la vue et la logique métier peut très vite rendre le code difficile à maintenir lorsque ce dernier grossit.</p>\n<h4>✘ Un “mauvais” composant :</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TrackList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tracks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tracks'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tracks <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tracks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>handleError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>track <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>track<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Nous pouvons le séparer en 2 composants, le premier étant un composant “container” et le deuxième un composant visuel.</p>\n<h4>✔ Composant <em>Container</em> :</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// LOgic is here!! </span>\n<span class=\"token comment\">// we have completely separated our logic and our view</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TrackListContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tracks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/tracks'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tracks <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tracks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>handleError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This is our view </span>\n    <span class=\"token comment\">// and the `tracks` props is like our ViewModel </span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TrackList</span> <span class=\"token attr-name\">tracks</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>✔ Composant <em>Presentational</em> :</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// here is our view</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TrackList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> tracks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tracks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>track <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>track<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>DOM Virtuel</h2>\n<p>Lorsque nous écrivons un composant React, nous décrivons à quoi l’UI ressemble en fonction des <em>props</em>.\nMême si React donne le sentiment au développeur de repeindre entièrement le DOM à chaque <em>update</em>,\nil implémente, en réalité, ~un DOM virtuel~ une représentation like du DOM.\nVoici un schéma illustrant le processus :</p>\n<p align=\"center\"><img src=\"./react_batch.svg\" width=\"600\"></p>\n<h6 align=\"center\">React et son DOM virtuel</h6>\n<p>Lorsque le <span style=\"color: #D32F2F\">modèle de données change</span> la méthode <em>render</em> du composant renvoie\nun objet correspondant à la représentation interne du DOM virtuel.\nReact compare ensuite ce nouveau DOM virtuel avec le précédent\n(algorithme de diff interne), et met à jour le <em>vrai DOM</em> en appliquant un série d’opérations\noptimisées. Ce DOM virtuel permet donc d’optimiser les accès au “vrai DOM”, les modifications sont appliquées\nen une fois.</p>","frontmatter":{"title":"React - intro","date":"December 06, 2016","spoiler":"Une belle idée"},"fields":{"slug":"/react-intro/"}}},"pageContext":{"slug":"/react-intro/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rebase - rewrite the past in fewer steps"}}}}