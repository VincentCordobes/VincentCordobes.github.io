{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"14bdcbc8-d066-5675-b1c3-877ea6091375","html":"<p>%%% INTRO</p>\n<p>There are lots of commands in git and you often can achieve your goal in several different ways. Usually I manage to get my stuff done in one way or another with just few commands like <code class=\"language-text\">rebase</code>, <code class=\"language-text\">reset</code>, <code class=\"language-text\">cherry-pick</code>. Sometimes I felt I was doing it in an ineffective way, like for instance <em>squashing</em> all commits into a single one so that it’s easier to <em>rebase</em> afterward 🙈\nEven though I knew that <code class=\"language-text\">rebase --onto</code> would be useful, I never took the time to <em>man</em> it… until recently.</p>\n<p>I guess now is a good time to write something about it. Actually I just want to inaugurate my blog with this first post 😝 (any reason is a good reason ☝️)</p>\n<p>So in which cases can the <code class=\"language-text\">--onto</code> option be useful?</p>\n<p>It can help you when:</p>\n<ul>\n<li>you want to <code class=\"language-text\">cherry-pick</code> multiples commits</li>\n<li>you created a branch from the ‘wrong’ one and you want to move all the commits starting from the ‘right’ branch</li>\n<li>you want to delete a range of commits\nActually, it all comes down to the same thing: <strong>bring a range of commits somewhere else</strong></li>\n</ul>\n<p>⚠️ I assume you have basic knowledge about git, and that you are familiar with its <code class=\"language-text\">index</code>, <code class=\"language-text\">working tree</code> as well as commands like <code class=\"language-text\">reset</code>, <code class=\"language-text\">cherry-pick</code></p>\n<p>Lets begin with a little reminder about how rebase works in its simplest form.</p>\n<h2>rebase</h2>\n<p><code class=\"language-text\">git rebase upstream [branch]</code></p>\n<p>Let say that you are on branch <code class=\"language-text\">B</code> (HEAD → B) and you run <code class=\"language-text\">git rebase A</code>\nFirst the index and working tree are reset to A. This is exactly like running <code class=\"language-text\">git reset --hard A</code> except that changes to tracked files in the working tree are saved somewhere for later use.\nAfter that, git will apply those saved commits one by one. This is like “cherry-picking” those commits.</p>\n<p>Note that you don’t have to be on branch B, git can perform a <code class=\"language-text\">checkout B</code> for you when you specify the 2nd arg <code class=\"language-text\">branch</code> → <code class=\"language-text\">git rebase A B</code>\nSo <code class=\"language-text\">git rebase A</code> is just a short hand for <code class=\"language-text\">git rebase A B</code> <strong>when</strong> you are already on <code class=\"language-text\">B</code> branch </p>\n<p>To summarize all of the following scenarios are equivalents:\n%% l23 from firstdraft </p>\n<h2>rebase —onto ?</h2>\n<p><code class=\"language-text\">git rebase --onto newbase upstream [branch]</code></p>\n<p>The only difference is that git will reset to <code class=\"language-text\">newbase</code> instead of <code class=\"language-text\">upstream</code> and will then applies commits between <code class=\"language-text\">upstream</code> (exluded) and <code class=\"language-text\">branch</code> (included)</p>\n<p>%% ouverture</p>\n<h2>rebase -i</h2>\n<p>Git rebase with the <code class=\"language-text\">-i</code> option is one of my favorite one because it lets you squash, delete, rename, edit..  basically playing with the past !! ❤️  but this is another story</p>","frontmatter":{"title":"Rebase onto","date":"December 24, 2018","spoiler":"Rewrite the past in fewer step"},"fields":{"slug":"/git-rebase/"}}},"pageContext":{"slug":"/git-rebase/","previous":null,"next":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}}}}