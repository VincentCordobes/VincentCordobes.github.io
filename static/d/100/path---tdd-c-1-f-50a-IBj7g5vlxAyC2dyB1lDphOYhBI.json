{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"6a76622d-8b41-5f82-b9a2-6897ba255306","html":"<p>Do you remember back in the days, in high school, when you were given just 4 hours to write a splendid essay but you didn’t know where to start, feeling afraid of the blank page ?  </p>\n<p>Isn’t it similar in software development when you get a new feature to implement, a new problem to solve or a bug to fix? How do I find a solution to the given problem? How can I be sure that it’s a good solution and it actually does what we expect it to do ?</p>\n<p>Also, just like we want the essay to be splendid, our ultimate goal is to provide clean, robust, consistent solution. Easier said than done I hear, but it is our goal anyway!</p>\n<h2>💭 Before coding</h2>\n<p>What’s the input? What’s the action to perform? What will be the output or observable changes in my system? Those are the first questions I ask myself before coding.\nDoes it make you think of something? Well, I guess writing a test can help as those are exactly its three composites. I initially did not want to use the term ‘testing’ but you’ve guessed it so I won’t beat around the bush.</p>\n<p>In this post I am going to talk about TDD—Test Driven Development—as it’s one of the way I often use to approch a task, problem.</p>\n<h2>🚦 Red-Green factor</h2>\n<p>First let me quote the three rules of TDD defined by Uncle Bob:</p>\n<ul>\n<li>You are not allowed to write any production code unless it is to make a failing unit test pass.</li>\n<li>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</li>\n<li>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</li>\n</ul>\n<p>Those rules may look a bit <em>strict</em> and following them may not be natural at first. Let me tell you: <strong>it’s a discipline!</strong></p>\n<p>I really understood it the day I was pair-programming with my mate.\nThere was that new feature—not very complex—we decided to implement in TDD. It included calculating a median. <em>We first need sort the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> items, if I have an odd number of items then we take the middle one otherwise we take the mean of the two middle values.</em> Easy peasy! I thought.\nThe <em>algorithm</em> in mind and the keyboard on hand, I was ready to code.\nI jumped right into the implementation. My friend - “wait, wait, wait, what are you doing ? Delete that code you just wrote”. We had an agreement, doing it in TDD. And each time I wanted to code the whole feature in one go, my friend was there to remind me not to do so.</p>\n<p>It was a bit hard but every time the test was red and we had to make it pass is was such a satisfaction, you can’t imagine! So rewarding!!</p>\n<p>It also has many benefits. By doing so </p>\n<p>In other words:</p>\n<ul>\n<li>❌ Write a failing test </li>\n<li>✅ Make that test pass </li>\n<li>🧹  Make it clean, refactor your code while keeping the tests green </li>\n</ul>\n<p>↺ Repeat!</p>","frontmatter":{"title":"One way to approach a problem","date":"January 31, 2019","spoiler":"Gonna talk about tdd","thumbnail":null},"fields":{"slug":"/tdd/"}}},"pageContext":{"slug":"/tdd/","previous":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase","draft":null}},"next":null}}