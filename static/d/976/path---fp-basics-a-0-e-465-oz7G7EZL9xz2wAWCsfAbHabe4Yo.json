{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"9b921c75-89cb-559e-a070-b21b9eaed8ca","html":"<p>The essence of programming is composition. In the OOP paradigm we are building sofware by using Object that communicates with each other. To build bigger software we compose those objects. The object is the building block</p>\n<p>In FP the building blocks are functions! Each function operate on data.\nThe software is made using functions and we compose them to build bigger software.</p>\n<p>What is functional programming? what are those principle?\nGonna talk here about the very basics of FP using the functional language OCaml</p>\n<h3>Pure function</h3>\n<ol>\n<li>Its result depends only on its inputâ€”and not on any external state</li>\n<li>It has no side effects such as mutating a global state/reference arguments, having I/Oâ€¦</li>\n</ol>\n<p>It brings us some benefits such as testability and determinism.\nI believe in a program one want to maximize pure functions and push unpure code at the edge.</p>\n<!--  -->\n<!-- ```ocaml -->\n<!-- let count = ref 0 -->\n<!-- let increment_by n = -->\n<!--   count := !count + n -->\n<!-- ``` -->\n<!-- Note that in OCaml `let` binding is always immutable -->\n<h3>Immutability</h3>\n<p>An immutable variable means its value canâ€™t be changed after itâ€™s created.\nIf you want to modify it, well you donâ€™t. Instead you create a new variable with the new value.</p>\n<p>In OCaml record fields are immutable by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token punctuation\">_</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Vincent\"</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token punctuation\">_</span>name  <span class=\"token operator\">=</span> <span class=\"token string\">\"Cordobes\"</span><span class=\"token punctuation\">;</span>\n  age        <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you try to update <code class=\"language-text\">me</code>, youâ€™ll get an error</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">me<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;-</span> <span class=\"token number\">35</span> <span class=\"token comment\">(* The record field age is not mutable *)</span></code></pre></div>\n<p>Instead you need to create a new variable</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> new<span class=\"token punctuation\">_</span>me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> me <span class=\"token keyword\">with</span> age <span class=\"token operator\">=</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In some other languages itâ€™s the opposite, objects are mutables by default.\nFor example in javascript you canâ€™t always escape from bugs like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vince'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 23</span>\n<span class=\"token function\">printAge</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 498</span></code></pre></div>\n<!-- <style> -->\n<!-- @import url('https://fonts.googleapis.com/css?family=Indie+Flower'); -->\n<!-- </style> -->\n<div style=\"color: #23A9F6;\n            font-size: 45px;\n            <!-- font-family: 'Indie Flower', cursive; -->\n            transform: translate(5.6em, -0.9em);\">ðŸ¤” ???</div>\n<br />\nWhich can lead to many \"wtf!\"\n<p>So immutability guaranties us that a variable will never change.\nItâ€™s not an FP specific thing and a best practice in programming as it leads to more readable and maintainable code.\nIt also makes it easier to do concurrent programming, eliminates defensive copies etc..</p>\n<h3>Referential transparency</h3>\n<h3>First class function</h3>\n<h3>Higher order function</h3>\n<h3>Composition</h3>\n<h3>Curryfication</h3>","frontmatter":{"title":"Basics of Functional Programming","date":"January 31, 2019","spoiler":"Gonna talk about basics of fp","thumbnail":null},"fields":{"slug":"/fp-basics/"}}},"pageContext":{"slug":"/fp-basics/","previous":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase","draft":null}},"next":{"fields":{"slug":"/tdd/"},"frontmatter":{"title":"One way to approach a problem","draft":true}}}}