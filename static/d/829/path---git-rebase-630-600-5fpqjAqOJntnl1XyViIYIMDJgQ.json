{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"14bdcbc8-d066-5675-b1c3-877ea6091375","html":"<p><a href=\"./diary/2018-11-09.md\">first draft</a></p>\n<p>%% accroche\nrebase is definitely the command I use the most in git.\nHow to never forget how to use this command again ?</p>\n<p>Why is that ?\nWhat is it in the first place ?\nWhy is it so important ?\nI’ll walk through </p>\n<p>It is a very powerful one, as it allows you rewrite the past. Sounds interesting, right ? 😜\n<a href=\"https://gph.is/162DEQG\">https://gph.is/162DEQG</a></p>\n<p>It turns out that rebase is the command I use the most.</p>\n<p>There are lots of commands in git and you often can achieve your goal in several ways.</p>\n<p>Turns out that when you get the mental model of what this command is doing you won’t ever forget how to use it. So what’s the mental model ?</p>\n<p>%%% INTRO</p>\n<p>%% Prerequisites\nI assume that you have basic knowledge about git, and you are familiar with the git <code class=\"language-text\">index</code>, <code class=\"language-text\">working tree</code>, <code class=\"language-text\">reset</code>, <code class=\"language-text\">cherry-pick</code></p>\n<p>…</p>\n<p>Usually I manage to get my shit done in one way or another with just <code class=\"language-text\">rebase</code>, <code class=\"language-text\">cherry-pick</code>, <code class=\"language-text\">merge</code> and <code class=\"language-text\">reset</code>.\nBut I knew that sometimes I was doing it in an ineffective way, (like squashing all commit into one because I know it will be easier to <em>rebase</em> afterward)</p>\n<p>Even though I felt that <code class=\"language-text\">rebase --onto</code> would be useful, I never took the time to <em>man</em> it, at least until recently.\n…</p>\n<p>I guess it’s a good time to write something about it\nActually I just want to inaugurate my blog with this first post 😝 (any reason is a good reason ☝️)</p>\n<p>%% use case\nThe use case: </p>\n<ul>\n<li>want to <code class=\"language-text\">cherry-pick</code> multiples commits</li>\n<li>you created a branch from the “wrong” one and you want to go start again from the “right” one </li>\n<li>you want to delete a range of commits\nActually, it all comes down to the same thing: <strong>bring a range of commits somewhere else</strong></li>\n</ul>\n<p>A little reminder about how rebase works in its simplest form:</p>\n<p><code class=\"language-text\">git rebase upstream [branch]</code></p>\n<p>Let say that you are on branch <code class=\"language-text\">B</code> (HEAD → B) and you run <code class=\"language-text\">git rebase A</code>\nFirst the index and working tree are reset to A. This is exactly like running <code class=\"language-text\">git reset --hard A</code> except that changes to tracked files in the working tree are saved somewhere for later use.\nAfter that, git will apply those saved commits one by one. This is like “cherry-picking” those commits.</p>\n<p>Note that you don’t have to be on branch B, git can perform a <code class=\"language-text\">checkout B</code> for you when you specify the 2nd arg <code class=\"language-text\">branch</code> → <code class=\"language-text\">git rebase A B</code>\nSo <code class=\"language-text\">git rebase A</code> is just a short hand for <code class=\"language-text\">git rebase A B</code> <strong>when</strong> you are already on <code class=\"language-text\">B</code> branch </p>\n<p>To summarize all of the following scenarios are equivalents:\n%% l23 from firstdraft </p>\n<p>What about the onto option ?</p>\n<p><code class=\"language-text\">git rebase --onto newbase upstream [branch]</code></p>\n<p>The only difference is that git will reset to <code class=\"language-text\">newbase</code> instead of <code class=\"language-text\">upstream</code> and will then applies commits between <code class=\"language-text\">upstream</code> (exluded) and <code class=\"language-text\">branch</code> (included)</p>\n<p>%% ouverture\nGit rebase with the <code class=\"language-text\">-i</code> option is one of my favorite one because it lets you squash, delete, rename, edit..  basically playing with the past !! ❤️  but this is another story</p>","frontmatter":{"title":"Rebase ont","date":"December 24, 2018","spoiler":"Let's demistify a very useful git command 🌳"},"fields":{"slug":"/git-rebase/"}}},"pageContext":{"slug":"/git-rebase/","previous":null,"next":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}}}}