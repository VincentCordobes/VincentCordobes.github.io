{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"84f160b0-8d88-5236-984f-df384fd53cd6","html":"<p><em>React</em> fournit seulement un moyen de dessiner de manière efficace des\ncomposants en fonction de données d’entrées.</p>\n<p><strong>Flux</strong> est un <em>pattern</em> permettant de gérer <strong>l’état d’une application</strong> qui garanti un flux de données\nunidirectionnel (<em>one way databinding</em>) <strong>Redux</strong> est l’implémentation\nla plus populaire.</p>\n<p>Redux, met en scène 3 principes :</p>\n<ul>\n<li><strong>une seule source de vérité</strong> : le <em>state</em> de l’application est maintenu dans une structure de données à l’intérieur d’un seul <strong>store</strong></li>\n<li>le state est <strong>immutable</strong> : La seule manière de modifier le <em>state</em> est via l’émission d’une <strong>action</strong>, un objet décrivant la modification à apporter. Toutes les modifications sont centralisées et se produisent une à une, évitant ainsi les problèmes de concurrence</li>\n<li>les modifications sont effectuées à l’aide de <strong>fonction pures</strong> appelées <strong>reducers</strong></li>\n</ul>\n<figure><img style=\"max-width:max-content\" src=\"/flux-eec49feb72d494c46fe2f4afae80bd77.svg\"><figcaption>Architecture Redux</figcaption></figure>\n<p>Le schéma illustre le flux unidirectionnel des données dans cette\narchitecture : des <strong>actions</strong> sont <strong>“dispatchées”</strong> et traitées par le\n<strong>reducer</strong>, qui se charge de mettre à jour le <strong>store</strong>. Toutes les vues\n(ici les composants react) abonnées au store se mettent à jour en\nconséquence. Ces vues peuvent également de “dispatcher” des\nactions et ainsi de suite.</p>\n<h3>Actions et Actions creators</h3>\n<p>Les <strong>actions</strong> sont des paquets de données envoyés au <em>store</em>. Elles\nsont la seule source d’information du store. Une action est envoyée au\nstore grâce à la fonction <code class=\"language-text\">store.dispatch</code>.</p>\n<p>Voici un exemple d’action qui représente le\nchangement de nom d’une personne :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vince'</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Si cette action se révèle être utilisée souvent, nous pouvons écrire une fonction qui se chargera de la créer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On appelle ces fonctions des <strong>action creator</strong>. Elles rendent les actions réutilisables et facilement testables.\nLes actions peuvent être “dispatchées” avec : <code class=\"language-text\">dispatch(changeName(&#39;Vincent&#39;))</code></p>\n<h3>Reducer</h3>\n<p>Les actions décrivent le fait que quelque chose s’est passé mais ne\nspécifient pas la manière dont le store doit être modifié. C’est le rôle\ndu <strong>reducer</strong>. Le <strong>reducer</strong> est une <strong>fonction pure</strong> qui prend en\nparamètre le <em>state</em>, une action, et retourne le nouveau <em>state</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">(previousState, action) =&gt; nextState</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Le <em>reducer</em> est une fonction pure, par conséquent il ne doit <strong>jamais</strong>:</p>\n<ul>\n<li>modifier directement ses arguments</li>\n<li>effectuer des opérations ayant des effets de bord tel que des appels à une api</li>\n<li>appeler des fonctions impures telles que <code class=\"language-text\">Date.now()</code> etc…</li>\n</ul>\n<p>Il est uniquement chargé de calculer le <em>nextState</em>.</p>\n<h4>✘ Exemple: un reducer incorrect, mutation du state INTERDITE!</h4>\n<p>Le <em>state</em> est muté.\nLa propriété du <em>state</em> étant modifiée directement (l.4),\nles composants abonnés à cette partie du <em>state</em> ne se mettrons pas à jour et ignorerons cette modification.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">:</span>\n      state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// INTERDIT !!</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>✔ Exemple Un reducer correct</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CHANGE_NAME'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><em><strong>Note</strong> : On utilise ici l’opérateur <strong>object spread</strong> <code class=\"language-text\">...</code>,\nune syntaxe d’ECMAScript</em> 2016, qui permet de copier les propriétés d’un\nobjet dans un nouvel objet d’une manière plus succincte.\nNous pouvons également utiliser des bibliothèques qui garantissent l’immutabilité telles que <em><a href=\"https://github.com/facebook/immutable-js/\">immutable.js</a></em> développée par Facebook_</p>\n<!-- <h6>TODO: combineReducer pour réduire le boilerplate</h6> -->\n<h3>Store</h3>\n<p>Le <strong>store</strong> est un objet qui :</p>\n<ul>\n<li>maintient le <strong>state</strong> de l’application</li>\n<li>permet l’accès à ce <em>state</em> via <code class=\"language-text\">getState()</code></li>\n<li>permet de mettre à jour le <em>state</em> via <code class=\"language-text\">dispatch(action)</code></li>\n<li>permet d’abonner des composants via <code class=\"language-text\">subscribe(listener)</code> (composants notifiés lorsque le <em>state</em> subit une modification)</li>\n</ul>\n<h3>Async Actions</h3>\n<p>Afin d’orchestrer des flux asynchrones (par exemple, les appels réseaux) nous pouvons utiliser le <em>middleware</em> <em>Redux-thunk</em>.\nCe <em>middleware</em> permet de traiter les <strong>actions</strong> étant des <strong>fonctions</strong> (appelées <em>thunk action</em>).\nUne action <em>thunk</em> ne doit pas forcément être pure et peut avoir des effets\nde bords. Les fonctions <em>dispatch</em> et <em>getState</em> du store lui sont passées en argument, ce qui lui donne la possibilité de <em>dispatcher</em> d’autres <em>actions</em> et d’accéder au <em>state</em>.</p>\n<h4>Exemple d’un <em>thunk action creator</em> qui retourne une fonction :</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">whatIsMyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://vincent.cordobes/name'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameSuccess</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchNameError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>L’exemple ci-dessus met en évidence une <em>action creator</em> qui retourne\nune fonction. Des actions marquant le début, le succès ou une erreur de\nl’appel (l.5) à l’API sont “dispatchées” (l.3, l.7, l.9) permettant de\nmettre à jour le <em>store</em> en fonction de l’avancement de la requête.</p>\n<p><em>Remarques relativement au code ci-dessus : syntaxe avec les mots clés <strong>async/await</strong>. Cette syntaxe fait son apparition dans ECMAScript 2017. En résumé, <code class=\"language-text\">await</code> permet d’attendre la résolution d’une promesse et ne peux être utilisé que dans une fonction préfixée par <code class=\"language-text\">async</code> (elle-même renverra à son tour une promesse) Il permet d’écrire le code asynchrone de javascript à la manière d’un code synchrone, ce améliore dans certains cas, la lisibilité.</em></p>\n<h2>Composants “Container” et composants “visuels”</h2>\n<p>La séparation “container”/“presentational” est d’autant plus vrai dans redux.\nCes deux termes proviennent, en l’occurrence, du créateur de redux.\n<figure><img src=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.xbauu6f3x\"><figcaption>smart and dumb components</figcaption></figure></p>\n<h3><em>Container</em> composants</h3>\n<ul>\n<li>Responsables de la manière dont <strong>“les choses” fonctionnent</strong></li>\n<li>Sont souvent <em>stateful</em> et servent de <strong>sources de données</strong></li>\n<li><strong>“Dispatchent” les actions</strong> flux</li>\n<li><strong>Transmettent</strong> des <strong>données et comportements</strong> aux composants “presentational” <strong>via leur <em>props</em></strong></li>\n<li>Peuvent contenir des composants “présentation” et “container”</li>\n<li><strong>Ne contiennent pas</strong> d’éléments du DOM ni de styles</li>\n<li>Peuvent être <strong>générés par connect()</strong></li>\n</ul>\n<h3><em>Presentational</em> composants</h3>\n<ul>\n<li>Responsables de la manière dont <strong>“les choses” apparaissent sur l’interface</strong></li>\n<li>Peuvent contenir des composants “présentation” et “container”</li>\n<li><strong>possèdent</strong> souvent des <strong>éléments DOM</strong> et du <strong>style</strong></li>\n<li><strong>Indépendants</strong> du reste de l’application</li>\n<li>Ne spécifient pas la manière dont les données sont chargés ou modifiées</li>\n<li><strong>Reçoivent</strong> les <strong>données et les callback</strong> exclusivement via leurs <strong>props</strong></li>\n<li>Possèdent uniquement un <em>state</em> si celui-ci concerne l’UI (et non des data)</li>\n<li>Souvent écrits sous forme de fonctions</li>\n</ul>\n<h3>Références</h3>\n<ul>\n<li><em>Redux doc</em> - <a href=\"http://redux.js.org\">http://redux.js.org</a></li>\n<li><em>Smart and dumb component</em> - <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.h6rxn85kl\">https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.h6rxn85kl</a></li>\n<li><em>React and flux in production best practices</em> - <a href=\"https://medium.com/@delveeng/react-and-flux-in-production-best-practices-c87766c57cb6#.elbdrmo4f\">https://medium.com/@delveeng/react-and-flux-in-production-best-practices-c87766c57cb6#.elbdrmo4f</a></li>\n</ul>","frontmatter":{"title":"Architecture Redux","date":"December 17, 2016","spoiler":"Des bons concepts"},"fields":{"slug":"/redux-intro/"}}},"pageContext":{"slug":"/redux-intro/","previous":{"fields":{"slug":"/react-intro/"},"frontmatter":{"title":"Introduction à React"}},"next":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase"}}}}