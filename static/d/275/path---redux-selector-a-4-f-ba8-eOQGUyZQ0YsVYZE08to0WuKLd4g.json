{"data":{"site":{"siteMetadata":{"title":"Vincent's page","author":"Vincent Cordobes"}},"markdownRemark":{"id":"3e78721d-204f-54f5-92b1-faed6b4c7c12","html":"<p>Afin de comprendre l’utilité des sélecteurs, prenons un exemple.\nConsidérons une liste de personnes, une recherche (par nom) et des filtres (sexe, age, etc…) sur ces personnes.</p>\n<p>En suivant les principes <em>Redux</em>, le <em>store</em> contient les données et les critères de recherche.\nÀ partir de ces éléments nous pouvons calculer la liste filtrée à afficher. </p>\n<p>Une bonne pratique, concernant le <em>state</em>, est de contenir seulement des <em>donnée minimisée</em>,\nc’est-à-dire des données ne pouvant pas être obtenues à partir d’autres données.\nLes états dérivés (calculés) ne doivent pas être présents dans le <em>state</em>.</p>\n<figure>\n<img src=\"/selectors0-bc881c9cf7496038f4f1a3154c288f66.svg\" width=\"300\">\n<figcaption>React filtre la data</figcaption>\n</figure>\n<p>Le “bon” endroit pour filtrer et afficher cette liste est donc la méthode <em>render</em>.\nAinsi, si  un critère de recherche ou si les données changent,\nle composant exécute la méthode <code class=\"language-text\">render</code>, filtre les données et les affiche.\nIl en résulte une <em>UI</em> toujours synchronisée avec le <em>state</em>. </p>\n<p>Cette technique présente néanmoins un inconvénient.\nSupposons qu’une <em>props</em> <strong>autre</strong> que les filtres et la liste de personnes, change :\nle filtrage de la liste se fera donc, <strong>inutilement</strong>, à chaque <em>update</em> du composant.</p>\n<p>La complexité de ce filtrage étant du 0(n), cela n’est pas très gênant si la taille des données à filtre reste modérée. </p>\n<p>Cependant, des listes de données potentiellement grandes ou même un calcul plus  complexe dégraderaient fortement les performances de l’application.</p>\n<p>C’est ici qu’entrent en jeu les <strong>selectors</strong>:</p>\n<figure>\n  <img src=\"/selectors-1dca7c8fdfec91367a93fb1aa35a8ac4.svg\" width=\"328\">\n  <figcaption>Un selecteur filtre la data et la passe au composant</figcaption>\n</figure>\n<p>Les <em>selectors</em> <strong>calculent des données dérivées</strong>. Ils permettent au <em>state</em> de ne stocker que les <strong>données minimisée</strong>.\nIls sont <strong>efficaces</strong> et ne sont <strong>pas recalculés</strong> si les arguments restent les mêmes → ils sont <strong>mémoisés</strong>.\nEnfin ils sont <em>composables</em>, c’est-à-dire qu’ils peuvent être utilisés en\nentrées d’autres <em>selectors</em>.\nAinsi toute la complexité est <em>déplacée</em> à l’exterieur et prise en charge par les <strong>selectors</strong>,</p>\n<p>Les <em>selectors</em> jouent le rôle d’<em>api</em>, permettant un accès au <em>state</em>.\nLes composants React ne connaisse que cette interface.\nUne conséquence directe est le <em>découplage</em> de ces composants vis-à-vis de la <em>forme</em> du <em>state</em>.\nUn autre bénéfice est la simplification du code des composants React.</p>\n<h3>Exemple avec la bibliothèque <a href=\"https://github.com/reactjs/reselect\">reselect</a></h3>\n<h4>Définition des <em>selectors</em></h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsers</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>users\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSearchTerm</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>searchTerm\n\n<span class=\"token comment\">// Memoized selector</span>\n<span class=\"token keyword\">const</span> getFilteredUsers <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  getUsers<span class=\"token punctuation\">,</span>\n  getSearchTerm<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> searchTerm<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n    user <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchTerm<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Définition du composant React</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Composant React - liste d'utilisateurs </span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filteredUsers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>filteredUsers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Création du container</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  filteredUsers<span class=\"token punctuation\">:</span> <span class=\"token function\">getFilteredUsers</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UserList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note</strong> : Nous avons seulement besoin de transmettre la liste filtrée au composant UserList. <code class=\"language-text\">connect</code> suffit à créer le composant <em>container</em>.</p>\n<p><strong>Note 1</strong> : Le pattern <em>mapStateToProps</em> étant récurrent, un sucre syntaxique serait :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStructuredSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  filteredUsers<span class=\"token punctuation\">:</span> getFilteredUsers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UserList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Selecteurs redux","date":"December 20, 2016","spoiler":"Lire la data du store"},"fields":{"slug":"/redux-selector/"}}},"pageContext":{"slug":"/redux-selector/","previous":{"fields":{"slug":"/redux-intro/"},"frontmatter":{"title":"Architecture Redux"}},"next":{"fields":{"slug":"/git-rebase/"},"frontmatter":{"title":"Rewrite the past in fewer steps with rebase"}}}}